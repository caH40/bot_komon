import { teamKeyboard, teamLeaveKeyboard, teamsKeyboard } from '../../keyboard/keyboard.js';
import { Rider } from '../../Model/Rider.js';
import { Team } from '../../Model/Team.js';

export async function teamMain(ctx) {
	try {
		const userId = ctx.update.callback_query.from.id;
		const riderDB = await Rider.findOne({ telegramId: userId }).populate('teamId');
		if (!riderDB)
			return await ctx.replyWithHTML('–î–ª—è —ç—Ç–æ–≥–æ –º–µ–Ω—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ <b>—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è!</b> üÜî');

		let title = riderDB.teamId?.name
			? `–ö–æ–º–∞–Ω–¥–∞ "${riderDB.teamId?.name}" üí™`
			: 'ü§ù –ü–æ—Ä–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è—Ç—å—Å—è –∫ –∫–æ–º–∞–Ω–¥–µ –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ—é!';

		return await ctx.editMessageText(`<b>${title}</b>`, teamKeyboard(riderDB));
	} catch (error) {
		console.log(error);
	}
}
export async function teamJoin(ctx) {
	try {
		const teamDB = await Team.find();
		if (teamDB.length === 0)
			return await ctx.replyWithHTML('–û—á–µ–Ω—å —Å—Ç—Ä–∞–Ω–Ω–æ, –Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ —Å–æ–∑–¥–∞–Ω–æ ü§∑‚Äç‚ôÇÔ∏è').then(m => {
				ctx.session.data.messagesIdForDelete.push(m.message_id);
			});

		return await ctx.editMessageText(
			`<b>üìå –°–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥</b>`,
			teamsKeyboard(teamDB)
		);
	} catch (error) {
		console.log(error);
	}
}
export async function teamLeave(ctx) {
	try {
		const userId = ctx.update.callback_query.from.id;
		const riderDB = await Rider.findOne({ telegramId: userId }).populate('teamId');
		let teamName = riderDB.teamId?.name;

		return await ctx.editMessageText(
			`<b>üö™ –í—ã—Ö–æ–¥ –∏–∑ –∫–æ–º–∞–Ω–¥—ã "${teamName}"</b>`,
			teamLeaveKeyboard(riderDB._id)
		);
	} catch (error) {
		console.log(error);
	}
}
